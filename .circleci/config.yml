version: 2.1
commands:
  print_pipeline_id:
    steps:
      - run:
          name: Print workflow ID
          # ${CIRCLE_WORKFLOW_ID:0:7} takes the first 7 chars of a Built-in environment variable
          command:
            echo ${CIRCLE_WORKFLOW_ID:0:7}
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
      # aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - print_pipeline_id
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            echo "insecure" >> ~/.curlrc
            SUCCESS=$(curl --insecure  https://kvdb.io/EsD4FsV2JDBzCseAAa2sn8/migration_<< parameters.workflow_id >>)            
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm run migrations:revert             
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}   
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls
            echo [web] > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt 
              cat .circleci/ansible/inventory.txt
               
 
                          
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
          #  - project/inventory.txt
            - project/.circleci/outputs/backend_url.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6b:ad:49:f0:d1:2b:4c:23:8b:cd:d7:59:28:7b:7f:21"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure env
          command: |
            pwd
            ls
            cd backend
            echo ENVIROMENT=production >> ~/project/backend/.env
            echo TYPEORM_CONNECTION=postgres >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ~/project/backend/.env
            echo NODE_ENV=production >> ~/project/backend/.env
            echo TYPEORM_HOST=${TYPEORM_HOST} ~/project/backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> ~/project/backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> ~/project/backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> ~/project/backend/.env
            cat ~/project/backend/.env
            ls  
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env      
           
  run-migrations:
    
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            touch migrations_log.txt
            npm run migrations >> migrations_log.txt
            cat migrations_log.txt
      - run:
          name: Send migration results to kvd
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migrations.txt; then 
             curl https://kvdb.io/EsD4FsV2JDBzCseAAa2sn8/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi

     # Here's where you will add some code to rollback on failure
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl unzip
      
      - run:
          name: Install aws-cli.
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            echo "AWS CLI version"
            aws --version 
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["6b:ad:49:f0:d1:2b:4c:23:8b:cd:d7:59:28:7b:7f:21"] 
       
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible
            apk add --no-cache tar npm gzip curl gcompat
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            rm -rf /var/cache/apk/*
      - run:
          name: Save all db varibles in env file 
          command: |
            ls
            pwd
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=production >>  ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            cat .env
            ls      
      - run:
          name: Deploy backend
          command: |
            cd backend
            pwd
            npm install
            npm run build            
      - run:
          name: Create artifact
          command: |
            tar czf artifact.tar.gz backend
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is:"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      #- revert-migrations:
    #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl unzip
            which curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install node modules
          command: |
            cd backend
            npm install
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            pwd
            
            echo " --- Cat inventory file --- "            
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            echo "The BACKEND IP: ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "The API URL: ${API_URL}"
            sleep 60
            curl "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                exit 0
            else
                exit 1
            fi

      # HHere's where you will add some code to rollback on failure
      #- revert-migrations:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment       
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure]  
      - deploy-frontend:
          requires: [run-migrations] 
      - deploy-backend:
          requires: [run-migrations] 
      - smoke-test:
          requires: [deploy-frontend, deploy-backend] 
